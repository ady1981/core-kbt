- name: '`thing`'
  description: Can be only a `class`, `property` or an `instance`.
  item_schema_rules:
    - rule_type: hasAttribute
      rule_parameters: '`name`'
    - rule_type: hasAttribute
      rule_parameters: '`item_schema_rules`'
  comment: The most fundamental concept in the knowledge base, representing anything that can be described or related.

- name: '`class`'
  description: Represents a concept, type, or category.
  subclassOf:
    - '`thing`'
  item_schema_rules:
    - rule_type: hasAttribute
      rule_parameters: '`definition`'
    - rule_type: hasAttribute
      rule_parameters: '`subclassOf`'
    - rule_type: hasNoAttribute
      rule_parameters: '`instanceOf`'

- name: '`property`'
  subclassOf:
    - '`thing`'
  description: Fundamental building block used to describe the characteristics and relationships of classes.
  comment: Properties define the attributes as connections between classes in the knowledge base. A string or numeric attribute does not require a property definition.
  item_schema_rules:
    - rule_type: hasAttribute
      rule_parameters: '`domainSubclassOf`'
    - rule_type: hasAttribute
      rule_parameters: '`rangeSubclassOf`'
    - rule_type: hasAttribute
      rule_parameters: '`isTransitive`'
    - rule_type: hasAttribute
      rule_parameters: '`isSymmetric`'
    - rule_type: hasAttribute
      rule_parameters: '`isFunctional`'
    - rule_type: hasNoAttribute
      rule_parameters: '`instanceOf`'

- name: '`subclassOf`'
  subpropertyOf:
    - '`property`'
  description: Describes a relationship of classification or kind for `class`es.
  comment: Indicates that one `class` is a more specific type of another `class`. This is a core relationship for building `class` taxonomies.
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  isTransitive: true
  subclassOf_examples:
    - name: '`human`'
      subclassOf: '`mammal`'
    - name: '`mammal`'
      subclassOf: '`animal`'

- name: '`subpropertyOf`'
  subpropertyOf:
    - '`property`'
  description: Describes a relationship of classification or kind for `property`s.
  comment: Indicates that one `property` is a more specific type of another `property`. This is a core relationship for building `property` taxonomies.
  domainSubclassOf: '`property`'
  rangeSubclassOf: '`property`'
  isTransitive: true

- name: '`partOf`'
  description: Describes a relationship of composition or containment
  subpropertyOf:
    - '`property`'
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  comment: A relationship for describing the structure and composition of items. The `property` is not necessarily transitive in the same way as `subpropertyOf`.

- name: '`structuralPartOf`'
  description: This property describes a relationship where the parts are essential constituents that make up the whole, and the whole cannot exist or function as intended without these specific parts.
  subpropertyOf:
    - '`partOf`'
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  structuralPartOf_examples:
    - subpropertyOf: '`structuralPartOf`'
      domainSubclassOf: '`finger`'
      rangeSubclassOf: '`hand`'
      derived_name: '`finger` `structuralPartOf` `hand`'

- name: '`locatedIn`'
  description: This property describes a relationship where the part is physically or spatially located within the boundaries of the whole.
  subpropertyOf:
    - '`partOf`'
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  locatedIn_examples:
    - subpropertyOf: '`locatedIn`'
      domainSubclassOf: '`capital city`'
      rangeSubclassOf: '`country`'
      derived_name: '`capital city` `locatedIn` `country`'
  instance_examples:
    - name: '`Moscow`'
      instanceOf:
        - '`capital city`'
      locatedIn: '`Russia`'

- name: '`instanceOf`'
  subpropertyOf:
    - '`property`'
  description: Specifies that this `instance` is an instance of a `class`.
  domainSubclassOf: '`instance`'
  rangeSubclassOf: '`class`'

- name: '`instance`'
  definition: Represents a specific unique instance that exists or existed in a world.
  subclassOf:
    - '`thing`'
  item_schema_rules:
    - rule_type: hasAttribute
      rule_parameters: '`instanceOf`'
    - rule_type: hasNoAttribute
      rule_parameters: '`subclassOf`'
    - rule_type: hasNoAttribute
      rule_parameters: '`definition`'
  comment: Every `instance` thing should be instance of a specific `class`.

- name: '`disjointWith`'
  subpropertyOf: '`property`'
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  isSymmetric: true

- name: '`equivalentClass`'
  subpropertyOf: '`property`'
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  isSymmetric: true
  isTransitive: true

- name: '`unionOf`'
  subpropertyOf: '`property`'
  description: Specifies that a `class` is equivalent to the union of several other `class`es.
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'

- name: '`disjointUnionOf`'
  subpropertyOf: '`unionOf`'
  description: Specifies that a `class` is equivalent to the union of several other `class`es, and that these constituent `class`es are pairwise disjoint.
  domainSubclassOf: '`class`'
  rangeSubclassOf: '`class`'
  disjointUnionOf_examples:
    - subpropertyOf: '`disjointUnionOf`'
      domainSubclassOf: '`father`'
      rangeSubclassOf: '`parent`'
      derived_name: '`father` `disjointUnionOf` `parent`'
    - subpropertyOf: '`disjointUnionOf`'
      domainSubclassOf: '`mother`'
      rangeSubclassOf: '`parent`'
      derived_name: '`mother` `disjointUnionOf` `parent`'
