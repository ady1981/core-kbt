You will be given two JSON arrays with equal array JSON Schema. Each JSON array consists of items. Your task is estimate Semantic Equivalence for the items in the arrays strictly follow the given Guidence and the given Examples.

# Guidence

- lets denote the JSON arrays as `array_1` and `array_2`
- subtask: find comparable items:
  - for each item in the `array_1`:
    - estimate an item semantic value and try to surely compare equivalence for it with item semantic value for each item in `array_2`. If you cannot surely compare equivalence the items consider them as not comparable items. Optionally write the reason why you cannot comparable the items into response notes property.
  - write the not comparable items into response properties `not_comparable`
    - `_1` property corresponds for `array_1`
    - `_2` property corresponds for `array_2`
    - for each not comparable item:
      - append the `[<array_item_index>, <item>]` into the corresponding not_comparable array property
- subtask: compare the rest comparable items:
  - for each comparable item_1 in the `array_1` and each comparable item_2 in the `array_2`:
    - compare the item_1 semantic value with the item_2 semantic value:
      - if:
        - the items are equal by semantic value: append the `{"_1": [<array_item_1_index>, <array_item_1>], "_2": [<array_item_2_index>, <array_item_2>]} to the `comparable.equal` property, where:
          - `_1` property corresponds to the `array_1`
          - `_2` property corresponds to the `array_2`
          - <array_item_1_index> is an index of array_item_1 in the `array_1`
          - array_item_index=1 for the first array_item
        - otherwise: append the `[<array_item_index>, <item>]` into response `comparable_not.equal` properties (into `_1` property for `array_1` and `_2` property for `array_2`)
- for the estimation of item semantic value take into account "description" properties in the arrays JSON Schema

# Examples

## 1)

### 1) array_1
```json
[{"value": 3}, {"value": 1}]
```

### 1) array_2
```json
[{"value": 1}, {"value": 5}]
```

### 1) Item JSON Schema
```json
{
  "type": "array",
  "items": [
    {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer"
        }
      },
      "required": [
        "value"
      ]
    },
  ]
}
```

### 1) Semantic Equivalence

```json
{
  "not_comparable": [],
  "comparable": {
    "equal": [ {"_1": [2, {"value": 1}], "_2": [1, {"value": 1}]} ],
    "not_equal": {"_1": [ [1, {"value": 3}] ], "_2": [ [2, {"value": 5}] ]}
  }
}
```


## 2)

### 2) array_1
```json
[{"statement": "The cat sat on the mat"}, {"statement": "The color A is generally white"}, {"statement": "The color B is black"}]
```

### 2) array_2
```json
[{"statement": "The dog barked at the moon"}, {"statement": "The color B is red"}, {"statement": "The color A is usually white"}]
```

### 2) Item JSON Schema
```json
{
  "type": "array",
  "items": [
    {
      "type": "object",
      "properties": {
        "value": {
          "statement": "string",

        }
      },
      "required": [
        "statement"
      ]
    },
  ]
}
```

### 2) Reasoning
For "statement" values "The cat sat on the mat" VS "The dog barked at the moon": it's impossible to compare their semantics.

### 2) Semantic Equivalence

```json
{
  "not_comparable": {"_1": [ [1, {"statement": "The cat sat on the mat"}] ], "_2": [ [1, {"statement": "The dog barked at the moon"}] ]},
  "comparable": {
    "equal": [ {"_1": [2, {"statement": "The color A is generally white"}], "_2": [3, {"statement": "The color A is usually white"}]} ],
    "not_equal": {"_1": [ [3, {"statement": "The color B is black"}] ], "_2": [ [2, {"statement": "The color B is red"}] ]}
  }
}
```

# array_1
{{array_1}}

# array_2
{{array_2}}

# Array JSON Schema
{{item_json_schema}}
